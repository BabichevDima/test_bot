package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"regexp"

	// "strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Wildberries (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)
type SearchResponse struct {
	Products []Product `json:"products"`
	Total    int       `json:"total"`
}

type Product struct {
	Id           int     `json:"id"`
	Brand        string  `json:"brand"`
	Name         string  `json:"name"`
	ReviewRating float32 `json:"reviewRating"`
	Feedbacks    int     `json:"feedbacks"`
	Supplier     string  `json:"supplier"`
	Sizes        []Size  `json:"sizes"`
}

type Size struct {
	Price struct {
		Basic     int `json:"basic"`
		Product   int `json:"product"`
		Logistics int `json:"logistics"`
	} `json:"price"`
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const (
	TelegramToken = "8273048786:AAHK9EPK_edyYR3ldNVPNFCTF7og4Xs8BKw" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
	WBAPIURL      = "https://recom.wb.ru/recom/sng/common/v8/search?ab_testing=false&appType=1&curr=byn&dest=-59202&hide_dtype=10;13;14&lang=ru&page=1&query=%s&resultset=catalog&spp=30&suppressSpellcheck=false"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(TelegramToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if !update.Message.IsCommand() && update.Message.Text != "" {
			go handleMessage(bot, update.Message)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {

	log.Println("*****************************************")
	log.Println(bot)
	log.Println(message.Text)
	log.Println("*****************************************")

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏ Wildberries
	nmId, err := extractNmIdFromURL(message.Text)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Wildberries. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
		sendMessage(bot, message.Chat.ID, "ü¶æ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–º–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
	msg := tgbotapi.NewMessage(message.Chat.ID, "üîç –ò—â—É –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã...")
	bot.Send(msg)

	// –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
	cheapestProduct, err := findCheapestSimilarProduct(nmId)
	if err != nil {
		sendMessage(bot, message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: "+err.Error())
		return
	}

	if cheapestProduct == nil {
		sendMessage(bot, message.Chat.ID, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
	response := formatProductResponse(cheapestProduct)
	sendMessage(bot, message.Chat.ID, response)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ URL Wildberries
func extractNmIdFromURL(url string) (string, error) {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ URL Wildberries
	re := regexp.MustCompile(`wildberries\.(by|ru|kz|com)/catalog/(\d+)/`)
	matches := re.FindStringSubmatch(url)

	if len(matches) < 3 {
		return "", fmt.Errorf("–∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Å—ã–ª–∫–µ")
	}

	return matches[2], nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
func findCheapestSimilarProduct(nmId string) (*Product, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
	encodedQuery := url.QueryEscape("–ø–æ—Ö–æ–∂–∏–µ " + nmId)
	apiURL := fmt.Sprintf(WBAPIURL, encodedQuery)

	// –°–æ–∑–¥–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç
	client := &http.Client{Timeout: 15 * time.Second}
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		return nil, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("User-Agent", "Mozilla/5.0 (PriceTrackerBot/1.0)")
	req.Header.Set("Accept", "application/json")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É: %s", resp.Status)
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	var searchResult SearchResponse
	decoder := json.NewDecoder(resp.Body)
	if err := decoder.Decode(&searchResult); err != nil {
		return nil, err
	}

	// –ò—â–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä
	var cheapestProduct *Product
	cheapestPrice := -1

	for i := range searchResult.Products {
		product := &searchResult.Products[i]
		if len(product.Sizes) == 0 {
			continue
		}

		// –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
		size := product.Sizes[0]
		finalPrice := size.Price.Product + size.Price.Logistics

		if cheapestPrice == -1 || finalPrice < cheapestPrice {
			cheapestPrice = finalPrice
			cheapestProduct = product
		}
	}

	return cheapestProduct, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
func formatProductResponse(product *Product) string {
	if product == nil || len(product.Sizes) == 0 {
		return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	}

	size := product.Sizes[0]
	finalPrice := float64(size.Price.Product+size.Price.Logistics) / 100
	// productPrice := float64(size.Price.Product) / 100 + float64(size.Price.Logistics) / 100
	// logisticsPrice := float64(size.Price.Logistics) / 100

	var builder strings.Builder

	builder.WriteString("üéØ *–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø–æ—Ö–æ–∂–∏–π —Ç–æ–≤–∞—Ä:*\n\n")
	builder.WriteString(fmt.Sprintf("üè∑Ô∏è *–ë—Ä–µ–Ω–¥:* %s\n", product.Brand))
	builder.WriteString(fmt.Sprintf("üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n", product.Name))
	builder.WriteString(fmt.Sprintf("‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* %.1f/5\n", product.ReviewRating))
	builder.WriteString(fmt.Sprintf("üí¨ *–û—Ç–∑—ã–≤–æ–≤:* %d\n", product.Feedbacks))
	builder.WriteString(fmt.Sprintf("üè™ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* %s\n", product.Supplier))
	builder.WriteString("\nüíµ *–¶–µ–Ω–∞:*\n")
	// builder.WriteString(fmt.Sprintf("   –¢–æ–≤–∞—Ä: %.2f —Ä—É–±.\n", productPrice))
	// builder.WriteString(fmt.Sprintf("   –î–æ—Å—Ç–∞–≤–∫–∞: %.2f —Ä—É–±.\n", logisticsPrice))
	builder.WriteString(fmt.Sprintf("   üéØ *–ò—Ç–æ–≥–æ: %.2f —Ä—É–±.*\n", finalPrice))
	builder.WriteString("\nüîó *–°—Å—ã–ª–∫–∞:*\n")
	builder.WriteString(fmt.Sprintf("https://www.wildberries.by/catalog/%d/detail.aspx", product.Id))

	return builder.String()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
func sendMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown" // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
	bot.Send(msg)
}
